{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>effdsl provides a simple and functional way to build Elasticsearch queries in Go.Instead of relying on maps or, even worse, raw string literals to describe queries\u2014which can be error-prone and lack features like easy parameterization, type safety, auto-completion, and compile-time validation\u2014 effdsl allows you to construct queries using intuitive function calls. This reduces the risk of subtle bugs caused by misspellings, makes parameterization easier and safer, and simplifies the process of constructing complex queries.</p> <p>Moreover, its design makes the procedural creation of queries both straightforward and refined, making it particularly useful for cases where queries need to be generated programmatically. (This started because I needed to implement an interpreter of an internal DSL into Elasticsearch queries.) The module focuses solely on building the query body, without direct integration with the database, allowing seamless integration into an existing Go codebase.</p> <p>effdsl supports most compound queries, full-text queries, and term-level queries. For a complete list of supported query types, please refer to the API coverage file in the effdsl GitHub repository. If there's a query type that isn't yet supported, feel free to open an issue or, even better, submit a pull request. \ud83d\ude4c</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#getting-effdsl","title":"Getting effdsl","text":"<p>With Go module support, simply add the following import</p> <pre><code>import \"github.com/sdqri/effdsl\"\n</code></pre> <p>to your code, and then <code>go [build|run|test]</code> will automatically fetch the necessary dependencies.</p> <p>Otherwise, run the following Go command to install the <code>effdsl</code> package:</p> <pre><code>$ go get -u github.com/sdqri/effdsl\n</code></pre>"},{"location":"#how-to-use","title":"How to use","text":"<p>Start with <code>effdsl.Define()</code>, and use types and documentations to find suitable options.</p>"},{"location":"#examples","title":"\ud83d\udd0d Examples:","text":"<p>Traditional Way:</p> <p>Here\u2019s a simple match query in the traditional way using raw strings in Go:</p> <pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n)\n\nquery := `{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"Hello World\"\n      }\n    }\n  }\n}`\n\nres, err := es.Search(\n  es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre> <p>Using effdsl:</p> <p>And here\u2019s the same query using effdsl:</p> <pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n\n    \"github.com/sdqri/effdsl/v2\"\n    mq \"github.com/sdqri/effdsl/v2/queries/matchquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        mq.MatchQuery(\"message\", \"Hello World\")\n    ),    \n)\n\nres, err := es.Search(\n  es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre> <p>For more examples and details on query parameters, visit the documentation.</p>"},{"location":"#contribution","title":"\ud83e\udd1d Contribution","text":"<p>Contributions are welcome! Whether it's fixing a bug \ud83d\udc1b, adding a new feature \ud83c\udf1f, or improving the documentation \ud83d\udcda, your help is appreciated. Please check out the CONTRIBUTING.md guide to get started.</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License. For more details, see the License file. \ud83d\udcc4 ( In short: You can use, modify, and distribute this software freely as long as you include the original copyright notice and license. The software is provided \"as-is\" without warranties or guarantees.)</p>"},{"location":"api_coverage/","title":"API Coverage","text":""},{"location":"api_coverage/#compound-queries","title":"Compound queries","text":"<ul> <li>[x] bool query</li> <li>[x] boosting query</li> <li>[x] constant score query </li> <li>[x] disjunction max query</li> <li>[ ] function_score query</li> </ul>"},{"location":"api_coverage/#full-text-queries","title":"Full text queries","text":"<ul> <li>[ ] intervals query</li> <li>[x] match query</li> <li>[x] match_bool_prefix query</li> <li>[x] match_phrase query</li> <li>[x] match_phrase_prefix query</li> <li>[ ] multi_match query</li> <li>[ ] combined_fields query</li> <li>[x] query_string query </li> <li>[x] simple_query_string query</li> </ul>"},{"location":"api_coverage/#term-level-queries","title":"Term-level queries","text":"<ul> <li>[x] exists query</li> <li>[x] fuzzy query</li> <li>[x] ids query</li> <li>[x] prefix query</li> <li>[x] range query</li> <li>[x] regexp query</li> <li>[x] term query</li> <li>[x] terms query</li> <li>[x] terms_set query</li> <li>[x] wildcard query</li> </ul>"},{"location":"api_coverage/#customize-search-results-options","title":"Customize Search results (options)","text":"<ul> <li>[x] Collapse search results</li> <li>[ ] Filter search results</li> <li>[ ] Highlighting</li> <li>[ ] Long-running searches</li> <li>[ ] Near real-time search</li> <li>[x] Paginate search results (Supported methods: Simple paginating, Search after)</li> <li>[ ] Retrieve inner hits</li> <li>[x] Retrieve selected fields (Supported methods: Source filtering)</li> <li>[ ] Search across clusters</li> <li>[ ] Search multiple data streams and indices</li> <li>[ ] Search shard routing</li> <li>[ ] Search templates</li> <li>[x] Sort search results (Suppoerted Parameters : value, order)</li> <li>[ ] kNN search</li> </ul>"},{"location":"api_coverage/#search-apis","title":"Search APIs","text":"<ul> <li>[x] Point in time</li> </ul>"},{"location":"bool_query/","title":"Boolean Query","text":"<p>A query that matches documents based on boolean combinations of other queries. The bool query maps to Lucene BooleanQuery. It is constructed using one or more boolean clauses, each with a specific occurrence type. The occurrence types are:</p>"},{"location":"bool_query/#occur-types","title":"Occur Types","text":"<ul> <li> <p>must   The clause (query) must appear in matching documents and will contribute to the score.</p> </li> <li> <p>filter   The clause (query) must appear in matching documents. Unlike must, the score of the query will be ignored. Filter clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching.</p> </li> <li> <p>should   The clause (query) should appear in the matching document.</p> </li> <li> <p>must_not   The clause (query) must not appear in the matching documents. Clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching. Because scoring is ignored, a score of 0 for all documents is returned.</p> </li> </ul> <p>The bool query adopts a more-matches-is-better approach, so the score from each matching must or should clause will be added together to provide the final _score for each document.</p>"},{"location":"bool_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mq \"github.com/sdqri/effdsl/queries/matchquery\"\n    bq \"github.com/sdqri/effdsl/queries/boolquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        bq.BoolQuery(\n            bq.Must(mq.MatchQuery(effdsl.M{\"user.name\": \"john_doe\"})),\n            bq.Must(mq.MatchQuery(\"post.status\": \"published\")),\n            bq.Filter(mq.MatchQuery(\"category\": \"technology\")),\n            bq.Filter(mq.MatchQuery(\"tags\": \"go\")),\n            bq.Should(mq.MatchQuery(\"title\": \"elasticsearch\")),\n            bq.Should(mq.MatchQuery(\"content\": \"search optimization\")),\n            bq.MustNot(mq.MatchQuery(\"user.role\": \"banned\")),\n            bq.MustNot(mq.MatchQuery(\"status\": \"draft\")),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"bool_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Must(query) (Optional, Functional option) The clause must appear in matching documents and will contribute to the score.</p> </li> <li> <p>Filter(query) (Optional, Functional option) The clause must appear in matching documents. Unlike must, the score of the query will be ignored. Filter clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching.</p> </li> <li> <p>Should(query) (Optional, Functional option) The clause should appear in the matching document.</p> </li> <li> <p>MustNot(query) (Optional, Functional option) The clause must not appear in the matching documents. Clauses are executed in filter context, meaning that scoring is ignored and clauses are considered for caching. Because scoring is ignored, a score of 0 for all documents is returned.</p> </li> <li> <p>WithMinimumShouldMatch(string) (Optional, Functional option) Minimum number of clauses that must match for a document to be returned.</p> </li> </ul>"},{"location":"bool_query/#additional-information","title":"Additional Information","text":"<p>For more details on the boolean query and its parameters, refer to the official Elasticsearch documentation on bool queries.</p>"},{"location":"boosting_query/","title":"Boosting Query","text":"<p>A boosting query matches documents based on a positive query while reducing the relevance score of documents that also match a negative query. This type of query is useful for situations where you want to boost the relevance of documents that match a primary condition but penalize documents that match a secondary, less desired condition. The boosting query is constructed using a positive query, a negative query, and a negative boost factor.</p>"},{"location":"boosting_query/#example","title":"Example","text":"<p><pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    bq \"github.com/sdqri/effdsl/queries/boostingquery\"\n    tq \"github.com/sdqri/effdsl/queries/termquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        bq.BoostingQuery(\n            tq.TermQuery(\"text\", \"apple\"),\n            tq.TermQuery(\"text\", \"pie tart fruit crumble tree\"),\n            0.5),\n    ), \n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre> Positional requierd parameters</p>"},{"location":"boosting_query/#parameters","title":"Parameters","text":""},{"location":"boosting_query/#parameters_1","title":"Parameters","text":"<ul> <li> <p>Positive (Query) (Required, positional) The query that documents must match to be considered for inclusion in the results.</p> </li> <li> <p>Negative (Query) (Required, positional) The query object used to reduce the relevance score of documents matching this query.</p> </li> <li> <p>NegativeBoost (float64) (Required, positional) A floating-point number between 0 and 1.0 used to decrease the relevance scores of documents matching the negative query.</p> </li> </ul>"},{"location":"boosting_query/#additional-information","title":"Additional Information","text":"<p>For more details on the boosting query and its parameters, refer to the official Elasticsearch documentation on boosting queries.</p>"},{"location":"completion_suggester/","title":"Completion Suggester","text":"<p>The completion suggester provides auto-complete or search-as-you-type functionality. It can return suggestions based on a prefix or a regular expression and supports filtering or boosting with contexts.</p>"},{"location":"completion_suggester/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    cs \"github.com/sdqri/effdsl/suggesters/completionsuggester\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithSuggest(\n        cs.CompletionSuggester(\n            \"song-suggest\",\n            \"nir\",\n            \"suggest\",\n            cs.WithSize(10),\n            cs.WithCompletionSuggesterSkipDuplicates(true),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"completion_suggester/#parameters","title":"Parameters","text":"<ul> <li>SuggestName (string) (Required, positional) Name used to identify the suggestion in the response.</li> <li>Prefix (string) (Required, positional) Prefix text used to generate suggestions. Use <code>CompletionSuggesterRegex</code> for regex input.</li> <li>Field (string) (Required, positional) Completion field from which to fetch suggestions.</li> <li>WithSize(uint64) (Optional, Functional option) Number of suggestions to return. Defaults to 5.</li> <li>WithCompletionSuggesterSkipDuplicates(bool) (Optional, Functional option) Whether duplicate suggestions should be filtered out.</li> <li>WithCompletionSuggesterFuzzy(opt ...FuzzyOption) (Optional, Functional option) Enables fuzzy prefix matching. <code>FuzzyOption</code> functions allow setting fuzziness, prefix length and other parameters.</li> <li>WithRegexFlags(RegexFlag) (Optional, Functional option) Regex flags used with <code>CompletionSuggesterRegex</code>.</li> <li>WithMaxDeterminizedStates(int64) (Optional, Functional option) Maximum allowed states for regex completion.</li> <li>WithMultipleCategoryContext(name, contexts ...string) (Optional, Functional option) Adds category contexts used for filtering or boosting suggestions.</li> <li>WithCategoryContext(name, context string, opts ...CategoryContextClauseOption) (Optional, Functional option) Adds a single category context with optional boost or prefix.</li> <li>WithGeoContext(name string, lat, lon float64, opts ...GeoContextClauseOption) (Optional, Functional option) Adds a geo context for location based suggestions.</li> </ul>"},{"location":"completion_suggester/#additional-information","title":"Additional Information","text":"<p>For more details on the completion suggester and its parameters, refer to the official Elasticsearch documentation on completion suggesters.</p>"},{"location":"constant_score/","title":"Constant Score Query","text":"<p>A constant score query wraps a filter query and returns every matching document with a relevance score equal to the boost parameter value. This query type is useful when you want to apply a uniform score to all documents that match a specific filter query.</p>"},{"location":"constant_score/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    csq \"github.com/sdqri/effdsl/queries/constantscore\"\n    tq \"github.com/sdqri/effdsl/queries/termquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        csq.ConstantScoreQuery(\n            tq.TermQuery(\"user.id\", \"kimchy\"),\n            1.2),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"constant_score/#parameters","title":"Parameters","text":"<ul> <li> <p>Filter (effdsl.Query) (Required, positional) The query object that documents must match. This is a required parameter.</p> </li> <li> <p>Boost (float64) (Required, positional) A floating-point number used as the constant relevance score for every document matching the filter query. This is a required parameter and defaults to 1.0 if not specified.</p> </li> </ul>"},{"location":"constant_score/#additional-information","title":"Additional Information","text":"<p>For more details on the constant score query and its parameters, refer to the official Elasticsearch documentation on constant score queries.</p>"},{"location":"dis_max_query/","title":"Disjunction Max Query","text":"<p>A disjunction max query (dis_max) is used to find documents that match multiple query clauses. The query returns documents that match any of the provided queries, and the relevance score is determined based on the best match. This query is useful for combining multiple queries into one and adjusting their scores with a tie-breaker.</p>"},{"location":"dis_max_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    dmq \"github.com/sdqri/effdsl/queries/dismaxquery\"\n    tq \"github.com/sdqri/effdsl/queries/termquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        dmq.DisMaxQuery(\n            []effdsl.QueryResult{\n                tq.TermQuery(\"title\", \"Quick pets\"),\n                tq.TermQuery(\"body\", \"Quick pets\"),\n            },\n            dmq.WithTieBreaker(0.7),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"dis_max_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Queries ([]query) (Required, positional) An array of query objects that documents must match. This is a required parameter.</p> </li> <li> <p>WithTieBreaker (float64) (Optional, Functional option) A floating-point number used to adjust the relevance scores when multiple queries match. This is an optional parameter.</p> </li> </ul>"},{"location":"dis_max_query/#additional-information","title":"Additional Information","text":"<p>For more details on the disjunction max query and its parameters, refer to the official Elasticsearch documentation on dis_max queries.</p>"},{"location":"exists_query/","title":"Exists Query","text":"<p>An exists query returns documents that contain an indexed value for a specified field. This query is useful for checking if a document contains a specific field.</p>"},{"location":"exists_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    eq \"github.com/sdqri/effdsl/queries/existsquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        eq.ExistsQuery(\"field_name\"),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"exists_query/#parameters","title":"Parameters","text":"<ul> <li>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</li> </ul>"},{"location":"exists_query/#additional-information","title":"Additional Information","text":"<p>For more details on the exists query and its parameters, refer to the official Elasticsearch documentation on exists queries.</p>"},{"location":"fuzzy_query/","title":"Fuzzy Query","text":"<p>Returns documents that contain terms similar to the search term, as measured by a Levenshtein edit distance.</p> <p>An edit distance is the number of one-character changes needed to turn one term into another. These changes can include:</p> <ul> <li>Changing a character (e.g., <code>box</code> \u2192 <code>fox</code>)</li> <li>Removing a character (e.g., <code>black</code> \u2192 <code>lack</code>)</li> <li>Inserting a character (e.g., <code>sic</code> \u2192 <code>sick</code>)</li> <li>Transposing two adjacent characters (e.g., <code>act</code> \u2192 <code>cat</code>)</li> </ul> <p>To find similar terms, the fuzzy query creates a set of all possible variations, or expansions, of the search term within a specified edit distance. The query then returns exact matches for each expansion.</p>"},{"location":"fuzzy_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    eq \"github.com/sdqri/effdsl/queries/existsquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        fq.FuzzyQuery(\n            \"user.id\",\n            \"ki\",\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"fuzzy_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Value (string) (Required, positional) The term you wish to find in the provided field. This is a required parameter.</p> </li> <li> <p>WithFuzziness (string) (Optional, Functional option) The degree of fuzziness allowed for the search term (e.g., \"AUTO\", \"1\", \"2\", etc.). Defaults to no fuzziness.</p> </li> <li> <p>WithMaxExpansions (int) (Optional, Functional option) Maximum number of terms to match. Defaults to 50.</p> </li> <li> <p>WithPrefixLength (int) (Optional, Functional option) Number of initial characters that must match exactly. Defaults to 0.</p> </li> <li> <p>WithTranspositions (bool) (Optional, Functional option) If true, allows transpositions of two adjacent characters. Defaults to true.</p> </li> <li> <p>WithRewrite (Rewrite) (Optional, Functional option) Method used to rewrite the query. Valid values are:</p> <ul> <li><code>constant_score</code>: Query is rewritten to a constant score query.</li> <li><code>scoring_boolean</code>: Query is rewritten to a scoring boolean query.</li> <li><code>constant_score_boolean</code>: Query is rewritten to a constant score boolean query.</li> <li><code>top_terms_N</code>: Query is rewritten to match the top N scoring terms.</li> <li><code>top_terms_boost_N</code>: Query is rewritten to match the top N scoring terms with boosting.</li> <li><code>top_terms_blended_freqs_N</code>: Query is rewritten to match the top N scoring terms with blended frequencies.</li> </ul> </li> </ul>"},{"location":"fuzzy_query/#additional-information","title":"Additional Information","text":"<p>For more details on the fuzzy query and its parameters, refer to the official Elasticsearch documentation on fuzzy queries.</p>"},{"location":"ids_query/","title":"IDs Query","text":"<p>Returns documents based on their IDs.</p>"},{"location":"ids_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    iq \"github.com/sdqri/effdsl/queries/idsquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        iq.IDsQuery(\"1\", \"4\", \"100\"),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"ids_query/#parameters","title":"Parameters","text":"<ul> <li>Values (...string) (Required, positional) An array of document IDs. This is a required parameter.</li> </ul>"},{"location":"ids_query/#additional-information","title":"Additional Information","text":"<p>For more details on the IDs query, see the official Elasticsearch documentation on IDs queries.</p>"},{"location":"match_all_query/","title":"Match All Query","text":"<p>A match all query returns all documents in the index, assigning each a <code>_score</code> of <code>1.0</code>. This query is useful when retrieving all documents or when combined with other queries.</p>"},{"location":"match_all_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    maq \"github.com/sdqri/effdsl/queries/matchallquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        maq.MatchAllQuery(\n            maq.WithBoost(1.2),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"match_all_query/#parameters","title":"Parameters","text":"<ul> <li>WithBoost (float64) (Optional, Functional option) Floating-point number used to decrease or increase the relevance scores of the query.</li> </ul>"},{"location":"match_all_query/#match-none-query","title":"Match None Query","text":"<p>A match none query returns no documents. This query is useful when dynamically constructing queries and needing an explicit way to return no results.</p>"},{"location":"match_all_query/#example_1","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mnq \"github.com/sdqri/effdsl/queries/matchnonequery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        mnq.MatchNoneQuery(),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"match_all_query/#additional-information","title":"Additional Information","text":"<p>For more details on the match all query and its parameters, refer to the official Elasticsearch documentation on match all queries.</p>"},{"location":"match_bool_prefix/","title":"Match Bool Prefix Query","text":"<p>A match bool prefix query analyzes its input and constructs a bool query from the terms. Each term except the last is used in a term query, and the last term is used in a prefix query.</p>"},{"location":"match_bool_prefix/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mbpq \"github.com/sdqri/effdsl/queries/matchboolprefix\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        mbpq.MatchBoolPrefixQuery(\n            \"message\",\n            \"quick brown f\",\n            mbpq.WithAnalyzer(\"keyword\"),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"match_bool_prefix/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Query (string) (Required, positional) The query text you wish to search for in the provided field. This is a required parameter.</p> </li> <li> <p>WithAnalyzer (string) (Optional, Functional option) Analyzer used to convert the text in the query value into tokens. If no analyzer is provided, the default analyzer for the field is used.</p> </li> </ul>"},{"location":"match_bool_prefix/#additional-information","title":"Additional Information","text":"<p>For more details on the match bool prefix query and its parameters, refer to the official Elasticsearch documentation on match bool prefix queries.</p>"},{"location":"match_phrase_prefix/","title":"Match Phrase Prefix Query","text":"<p>A match phrase prefix query returns documents that match a given phrase with a prefix, considering the position of the terms. The provided text is analyzed before matching.</p>"},{"location":"match_phrase_prefix/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mppq \"github.com/sdqri/effdsl/queries/matchphraseprefixquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        mppq.MatchPhrasePrefixQuery(\n            \"field_name\",\n            \"some phrase prefix query\",\n            mppq.WithAnalyzer(\"my_analyzer\"),\n            mppq.WithSlop(2),\n            mppq.WithMaxExpansions(10),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"match_phrase_prefix/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field to search. This is a required parameter.</p> </li> <li> <p>Query (string) (Required, positional) The text to search for in the provided field. This is a required parameter.</p> </li> <li> <p>WithAnalyzer (string) (Optional, Functional option) Analyzer used to convert the text in the query value into tokens. Defaults to the index-time analyzer mapped for the field. If no analyzer is mapped, the index\u2019s default analyzer is used.</p> </li> <li> <p>WithSlop (int) (Optional, Functional option) Maximum number of positions allowed between matching tokens for phrases. Defaults to 0.</p> </li> <li> <p>WithMaxExpansions (int) (Optional, Functional option) Maximum number of terms to which the last provided term will expand. Defaults to not expanding terms.</p> </li> <li> <p>WithZeroTermsQuery (ZeroTerms) (Optional, Functional option) Indicates what to do when the analyzed text contains no terms. Valid values are:</p> <ul> <li><code>none</code> (Default): No documents are returned if the analyzer removes all tokens.</li> <li><code>all</code>: Returns all documents, similar to a match_all query.</li> </ul> </li> </ul>"},{"location":"match_phrase_prefix/#additional-information","title":"Additional Information","text":"<p>For more details on the match phrase prefix query and its parameters, refer to the official Elasticsearch documentation on match phrase prefix queries.</p>"},{"location":"match_phrase_query/","title":"Match Phrase Query","text":"<p>A match phrase query returns documents that match a given phrase, considering the position of the terms. The provided text is analyzed before matching.</p>"},{"location":"match_phrase_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mpq \"github.com/sdqri/effdsl/queries/matchphrasequery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        mpq.MatchPhraseQuery(\n            \"field_name\",\n            \"some phrase query\",\n            mpq.WithAnalyzer(\"my_analyzer\"),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"match_phrase_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field to search. This is a required parameter.</p> </li> <li> <p>Query (string) (Required, positional) The text to search for in the provided field. This is a required parameter.</p> </li> <li> <p>WithAnalyzer (string) (Optional, Functional option) Analyzer used to convert the text in the query value into tokens. Defaults to the index-time analyzer mapped for the field. If no analyzer is mapped, the index\u2019s default analyzer is used.</p> </li> <li> <p>WithSlop (int) (Optional, Functional option) Maximum number of positions allowed between matching tokens for phrases. Defaults to 0.</p> </li> <li> <p>WithZeroTermsquery (ZeroTerms) (Optional, Functional option) Indicates what to do when the analyzed text contains no terms. Valid values are:</p> <ul> <li><code>none</code> (Default): No documents are returned if the analyzer removes all tokens.</li> <li><code>all</code>: Returns all documents, similar to a match_all query.</li> </ul> </li> </ul>"},{"location":"match_phrase_query/#additional-information","title":"Additional Information","text":"<p>For more details on the match phrase query and its parameters, refer to the official Elasticsearch documentation on match phrase queries.</p>"},{"location":"match_query/","title":"Match Query","text":"<p>A match query returns documents that match a provided text, number, date, or boolean value. The provided text is analyzed before matching. </p>"},{"location":"match_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mq \"github.com/sdqri/effdsl/queries/matchquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        mq.MatchQuery(\n            \"field_name\",\n            \"some match query\",\n            mq.WithOperator(mq.AND),\n            mq.WithFuzzinessParameter(mq.FuzzinessAUTO),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"match_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Query (string) (Required, positional) The text, number, boolean value, or date you wish to find in the provided field. This is a required parameter.</p> </li> <li> <p>WithAnalyzer (string) (Optional, Functional option) Analyzer used to convert the text in the query value into tokens. Defaults to the index-time analyzer mapped for the field. If no analyzer is mapped, the index\u2019s default analyzer is used.</p> </li> <li> <p>WithAutoGenerateSynonymsPhrase (bool) (Optional, Functional option) If true, match phrase queries are automatically created for multi-term synonyms.</p> </li> <li> <p>WithBoost (float64) (Optional, Functional option) Floating-point number used to decrease or increase the relevance scores of the query.</p> </li> <li> <p>WithFuzzinessParameter (int) (Optional, Functional option) Maximum number of terms to which the query will expand.</p> </li> <li> <p>WithMaxExpansions (int) (Optional, Functional option) Maximum number of terms to which the query will expand. Defaults to 50.</p> </li> <li> <p>WithPrefixLength (int) (Optional, Functional option) Number of beginning characters left unchanged for fuzzy matching. Defaults to 0.</p> </li> <li> <p>WithFuzzyTranspositions (bool) (Optional, Functional option) If true, edits for fuzzy matching include transpositions of two adjacent characters.</p> </li> <li> <p>WithFuzzyRewrite (FuzzyRewrite) (Optional, Functional option) Method used to rewrite the query. See the rewrite parameter for valid values and more information.</p> </li> <li> <p>WithOperator (Operator) (Optional, Functional option) Boolean logic used to interpret text in the query value. Valid values are:</p> <ul> <li><code>OR</code> (Default): For example, a query value of \"capital of Hungary\" is interpreted as \"capital OR of OR Hungary\".</li> <li><code>AND</code>: For example, a query value of \"capital of Hungary\" is interpreted as \"capital AND of AND Hungary\".</li> </ul> </li> <li> <p>WithMinimumShouldMatch (string) (Optional, Functional option) Minimum number of clauses that must match for a document to be returned.</p> </li> </ul>"},{"location":"match_query/#additional-information","title":"Additional Information","text":"<p>For more details on the match query and its parameters, refer to the official Elasticsearch documentation on match queries.</p>"},{"location":"nested_query/","title":"Nested Query","text":"<p>A nested query searches nested field objects as if they were separate documents. It returns the root document when a nested document matches the provided query.</p>"},{"location":"nested_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    bq \"github.com/sdqri/effdsl/queries/boolquery\"\n    mq \"github.com/sdqri/effdsl/queries/matchquery\"\n    nq \"github.com/sdqri/effdsl/queries/nestedquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        nq.WithNested(\n            \"path\",\n            bq.BoolQuery(\n                bq.Should(\n                    mq.MatchQuery(\"field1\", \"val1\"),\n                ),\n            ),\n            nq.WithScoreMode(\"avg\"),\n            nq.WithIgnoreUnmapped(true),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"nested_query/#parameters","title":"Parameters","text":"<ul> <li>Path (string) (Required, positional) Path to the nested object you wish to search.</li> <li>Query (effdsl.Query) (Required, positional) Query to run on the nested objects.</li> <li>WithScoreMode(string) (Optional, Functional option) Indicates how scores for matching child objects affect the parent document's score.</li> <li>WithIgnoreUnmapped(bool) (Optional, Functional option) If true, ignore unmapped paths and return no documents instead of an error.</li> </ul>"},{"location":"nested_query/#additional-information","title":"Additional Information","text":"<p>For more details on the nested query and its parameters, refer to the official Elasticsearch documentation on nested queries.</p>"},{"location":"phrase_suggester/","title":"Phrase Suggester","text":"<p>The phrase suggester corrects entire phrases based on n-gram matching. It is useful for providing \"did you mean\" functionality.</p>"},{"location":"phrase_suggester/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    mq \"github.com/sdqri/effdsl/queries/matchquery\"\n    ps \"github.com/sdqri/effdsl/suggesters/phrasesuggester\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithSuggest(\n        ps.PhraseSuggester(\n            \"simple-phrase\",\n            \"noble prize\",\n            \"title.trigram\",\n            ps.WithLaplaceSmoothing(0.7),\n            ps.WithDirectGenerator(\"title.trigram\", ps.WithSuggestMode(ps.Always)),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"phrase_suggester/#parameters","title":"Parameters","text":"<ul> <li>SuggestName (string) (Required, positional) Name used to identify the suggestion in the response.</li> <li>Text (string) (Required, positional) Text to generate phrase suggestions for.</li> <li>Field (string) (Required, positional) Field that contains the n\u2011grams used for suggestions.</li> <li>WithGramSize(uint64) (Optional, Functional option) Maximum size of the n\u2011grams in the field.</li> <li>WithRealWordErrorLikelihood(float64) (Optional, Functional option) Likelihood of a term being misspelled even if it exists in the dictionary.</li> <li>WithConfidence(float64) (Optional, Functional option) Threshold factor applied to input phrase scores.</li> <li>WithMaxErrors(float64) (Optional, Functional option) Maximum percentage or number of terms considered misspellings.</li> <li>WithSeparator(string) (Optional, Functional option) Separator used to join tokens in the bigram field.</li> <li>WithSize(uint64) (Optional, Functional option) Number of candidate phrases to return.</li> <li>WithAnalyzer(string) (Optional, Functional option) Analyzer used to analyze the suggest text.</li> <li>WithShardSize(uint64) (Optional, Functional option) Maximum number of suggestions retrieved from each shard.</li> <li>WithHighlight(preTag, postTag string) (Optional, Functional option) Adds highlighting to changed tokens.</li> <li>WithCollate(queryResult, opts ...WithCollateOption) (Optional, Functional option) Checks suggestions against a query. <code>WithParams</code> and <code>WithPrune</code> are available options.</li> <li>WithStupidBackoffSmoothing(discount float64), WithLaplaceSmoothing(alpha float64), WithLinearInterpolationSmoothing(tri, bi, uni float64) (Optional, Functional option) Smoothing models used to balance frequencies.</li> <li>WithDirectGenerator(field string, opts ...WithDirectGeneratorOption) (Optional, Functional option) Adds a direct generator. Options include <code>WithSuggestMode</code>, <code>WithDirectGeneratorSize</code>, <code>WithMaxEdits</code>, <code>WithPrefixLength</code>, <code>WithMinWordLength</code>, <code>WithMaxInspections</code>, <code>WithMinDocFreq</code>, <code>WithMaxTermFreq</code>, <code>WithPreFilter</code> and <code>WithPostFilter</code>.</li> </ul>"},{"location":"phrase_suggester/#additional-information","title":"Additional Information","text":"<p>For more details on the phrase suggester and its parameters, refer to the official Elasticsearch documentation on phrase suggesters.</p>"},{"location":"prefix_query/","title":"Prefix Query","text":"<p>A prefix query returns documents that contain terms starting with the specified prefix in a given field.</p>"},{"location":"prefix_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    pq \"github.com/sdqri/effdsl/queries/prefixquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        pq.PrefixQuery(\n            \"name\",\n            \"al\",\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"prefix_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Value (string) (Required, positional) The prefix you wish to match against terms in the provided field. This is a required parameter.</p> </li> <li> <p>WithRewrite (Rewrite) (Optional, Functional option) The method used to rewrite the query. Valid values are:</p> <ul> <li><code>constant_score</code>: Query is rewritten to a constant score query.</li> <li><code>scoring_boolean</code>: Query is rewritten to a scoring boolean query.</li> <li><code>constant_score_boolean</code>: Query is rewritten to a constant score boolean query.</li> <li><code>top_terms_N</code>: Query is rewritten to match the top N scoring terms.</li> <li><code>top_terms_boost_N</code>: Query is rewritten to match the top N scoring terms with boosting.</li> <li><code>top_terms_blended_freqs_N</code>: Query is rewritten to match the top N scoring terms with blended frequencies.</li> </ul> </li> <li> <p>WithCaseInsensitive (bool) (Optional, Functional option) Whether the query is case insensitive. Defaults to false.</p> </li> </ul>"},{"location":"prefix_query/#additional-information","title":"Additional Information","text":"<p>For more details on the prefix query and its parameters, refer to the official Elasticsearch documentation on prefix queries.</p>"},{"location":"query_string/","title":"Query String Query","text":"<p>A query string query parses and executes a search query based on a query string syntax. It allows for flexible and complex query expressions.</p>"},{"location":"query_string/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    qs \"github.com/sdqri/effdsl/queries/querystring\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        qs.QueryString(\n            \"alice\",\n            qs.WithFields(\"first_name\", \"last_name\")\n            qs.WithBoost(1.5),\n            qs.WithFuzziness(\"AUTO\"),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"query_string/#parameters","title":"Parameters","text":"<ul> <li> <p>Query (string) (Required, positional) The query string to parse and use for search. This is a required parameter.</p> </li> <li> <p>WithDefaultField (string) (Optional, Functional option) Default field to search if no field is provided in the query string.</p> </li> <li> <p>WithAllowLeadingWildcard () (Optional, Functional option) If true, wildcard characters <code>*</code> and <code>?</code> are allowed as the first character in the query string. Defaults to true.</p> </li> <li> <p>WithAnalyzeWildcard () (Optional, Functional option) If true, the query attempts to analyze wildcard terms in the query string. Defaults to false.</p> </li> <li> <p>WithAnalyzer (string) (Optional, Functional option) Analyzer used to convert the text in the query string into tokens.</p> </li> <li> <p>WithAutoGenerateSynonymsPhrase (bool) (Optional, Functional option) If true, match phrase queries are automatically created for multi-term synonyms. Defaults to true.</p> </li> <li> <p>WithBoost (float64) (Optional, Functional option) Floating point number used to adjust the relevance scores of the query.</p> </li> <li> <p>WithDefaultOperator (Operator) (Optional, Functional option) Default boolean logic used to interpret text in the query string. Valid values are:</p> <ul> <li><code>OR</code>: Logical OR.</li> <li><code>AND</code>: Logical AND.</li> </ul> </li> <li> <p>WithEnablePositionIncrements (bool) (Optional, Functional option) If true, enable position increments in queries constructed from the query string search.</p> </li> <li> <p>WithFields (...string) (Optional, Functional option) Array of fields to search. Supports wildcards <code>*</code>.</p> </li> <li> <p>WithFuzziness (string) (Optional, Functional option) Maximum edit distance allowed for fuzzy matching.</p> </li> <li> <p>WithFuzzyMaxExpansions (int) (Optional, Functional option) Maximum number of terms for fuzzy matching expansion.</p> </li> <li> <p>WithFuzzyPrefixLength (int) (Optional, Functional option) Number of beginning characters left unchanged for fuzzy matching.</p> </li> <li> <p>WithFuzzyTranspositions (bool) (Optional, Functional option) If true, edits for fuzzy matching include transpositions of adjacent characters.</p> </li> <li> <p>WithLenient (bool) (Optional, Functional option) If true, format-based errors are ignored.</p> </li> <li> <p>WithMaxDeterminizedStates (int) (Optional, Functional option) Maximum number of automaton states required for the query.</p> </li> <li> <p>WithMinimumShouldMatch (string) (Optional, Functional option) Minimum number of clauses that must match for a document to be returned.</p> </li> <li> <p>WithQuoteAnalyzer (string) (Optional, Functional option) Analyzer used to convert quoted text in the query string into tokens.</p> </li> <li> <p>WithPhraseSlop (int) (Optional, Functional option) Maximum number of positions allowed between matching tokens for phrases.</p> </li> <li> <p>WithQuoteFieldSuffix (string) (Optional, Functional option) Suffix appended to quoted text in the query string.</p> </li> <li> <p>WithRewrite (Rewrite) (Optional, Functional option) Method used to rewrite the query. Valid values are:</p> <ul> <li><code>constant_score</code></li> <li><code>scoring_boolean</code></li> <li><code>constant_score_boolean</code></li> <li><code>top_terms_N</code></li> <li><code>top_terms_boost_N</code></li> <li><code>top_terms_blended_freqs_N</code></li> </ul> </li> <li> <p>WithTimeZone (string) (Optional, Functional option) UTC offset or IANA time zone used to convert date values in the query string to UTC.</p> </li> </ul>"},{"location":"query_string/#additional-information","title":"Additional Information","text":"<p>For more details on the query string query and its parameters, refer to the official Elasticsearch documentation on query string queries.</p>"},{"location":"range_query/","title":"Range Query","text":"<p>A range query returns documents that contain terms within a specified range. It supports querying for values that are greater than, less than, or between certain values.</p>"},{"location":"range_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    rq \"github.com/sdqri/effdsl/queries/rangequery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        rq.RangeQuery(\n            \"age\",\n            rq.WithGT(10),\n            rq.WithLTE(20),\n            rq.WithBoost(2.0),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"range_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>WithGT (any) (Optional, Functional option) Greater than. If specified, the range query will include terms greater than this value.</p> </li> <li> <p>WithGTE (any) (Optional, Functional option) Greater than or equal to. If specified, the range query will include terms greater than or equal to this value.</p> </li> <li> <p>WithLT (any) (Optional, Functional option) Less than. If specified, the range query will include terms less than this value.</p> </li> <li> <p>WithLTE (any) (Optional, Functional option) Less than or equal to. If specified, the range query will include terms less than or equal to this value.</p> </li> <li> <p>WithFormat (string) (Optional, Functional option) Date format used to convert date values in the query.</p> </li> <li> <p>WithRelation (Relation) (Optional, Functional option) Indicates how the range query matches values for range fields. Valid values are:</p> <ul> <li><code>INTERSECTS</code></li> <li><code>CONTAINS</code></li> <li><code>WITHIN</code></li> </ul> </li> <li> <p>WithTimeZone (string) (Optional, Functional option) Coordinated Universal Time (UTC) offset or IANA time zone used to convert date values in the query to UTC.</p> </li> <li> <p>WithBoost (float64) (Optional, Functional option) Floating point number used to decrease or increase the relevance scores of the query. Defaults to 1.0.</p> </li> </ul>"},{"location":"range_query/#additional-information","title":"Additional Information","text":"<p>For more details on the range query and its parameters, refer to the official Elasticsearch documentation on range queries.</p>"},{"location":"regexp_query/","title":"Regexp Query","text":"<p>A regexp query returns documents that contain terms matching a specified regular expression. The regular expression can include additional options for controlling the match behavior.</p>"},{"location":"regexp_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    rq \"github.com/sdqri/effdsl/queries/regexpquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        rq.RegexpQuery(\n            \"user.id\",\n            \"k.*y\",\n            rq.WithFlags(\"ALL\"),\n            rq.WithCaseInsensitive(),\n            rq.WithMaxDeterminizedStates(10000),\n            rq.WithRQRewrite(rq.ConstantScore),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"regexp_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Value (string) (Required, positional) The regular expression pattern to match against the field. This is a required parameter.</p> </li> <li> <p>WithFlags (string) (Optional, Functional option) Additional matching options for the regular expression.</p> </li> <li> <p>WithCaseInsensitive (bool) (Optional, Functional option) If true, the regular expression is case-insensitive.</p> </li> <li> <p>WithMaxDeterminizedStates (int) (Optional, Functional option) The maximum number of automaton states required for the query. Lower values will reduce memory usage but increase query time.</p> </li> <li> <p>WithRewrite (Rewrite) (Optional, Functional option) The method used to rewrite the query. Valid values are:</p> <ul> <li><code>constant_score</code>: Query is rewritten to a constant score query.</li> <li><code>scoring_boolean</code>: Query is rewritten to a scoring boolean query.</li> <li><code>constant_score_boolean</code>: Query is rewritten to a constant score boolean query.</li> <li><code>top_terms_N</code>: Query is rewritten to match the top N scoring terms.</li> <li><code>top_terms_boost_N</code>: Query is rewritten to match the top N scoring terms with boosting.</li> <li><code>top_terms_blended_freqs_N</code>: Query is rewritten to match the top N scoring terms with blended frequencies.</li> </ul> </li> </ul>"},{"location":"regexp_query/#additional-information","title":"Additional Information","text":"<p>For more details on the regexp query and its parameters, refer to the official Elasticsearch documentation on regexp queries.</p>"},{"location":"release_notes/","title":"Release Notes","text":""},{"location":"release_notes/#v212-latest","title":"v2.1.2 Latest","text":""},{"location":"release_notes/#whats-new","title":"What's New","text":"<ul> <li>\u2728 Add support for boosting query, constant score query, disjunction max query in compound queries.</li> <li>\u2728 Add support for match query, match_bool_prefix query, match_phrase query, match_phrase_prefix query, simple_query_string query in full text queries.</li> <li>\u2728 Add support for ids query, prefix query, wildcard query in term-level queries.</li> <li>\ud83d\udcdd Add documentation for all supported queries.</li> </ul>"},{"location":"release_notes/#whats-changed","title":"What's Changed","text":"<ul> <li>\ud83d\udd04 Separate queries into packages to remove prefixed parameters.</li> <li>\u2705 Complete functional options in queries.</li> </ul>"},{"location":"release_notes/#v120","title":"v1.2.0","text":"<ul> <li>\ud83d\udca1 Extend <code>MatchQuery</code> parameters &amp; add <code>WildcardQuery</code> and <code>Suggesters</code>. PR #2 by @moguchev.</li> </ul>"},{"location":"simple_query_string/","title":"Simple Query String","text":"<p>A simple query string query parses a provided query string and searches for documents using the specified fields and options. It supports a variety of query options to refine the search.</p>"},{"location":"simple_query_string/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    sqs \"github.com/sdqri/effdsl/queries/simplequerystring\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        sqs.SimpleQueryString(\n            `\"fried eggs\" +(eggplant | potato) -frittata`,\n            sqs.WithFields(\"title^5\", \"body\"),\n            sqs.WithDefaultOperator(sqs.AND),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"simple_query_string/#parameters","title":"Parameters","text":"<ul> <li> <p>Query (string) (Required, positional) The query string you wish to parse and use for search. This is a required parameter.</p> </li> <li> <p>WithFields (...string) (Optional, Functional option) Array of fields to search. Supports wildcards <code>*</code>.</p> </li> <li> <p>WithDefaultOperator (Operator) (Optional, Functional option) Default boolean logic used to interpret text in the query string. Valid values are:</p> <ul> <li><code>OR</code>: For example, a query value of \"capital of Hungary\" is interpreted as \"capital OR of OR Hungary\".</li> <li><code>AND</code>: For example, a query value of \"capital of Hungary\" is interpreted as \"capital AND of AND Hungary\".</li> </ul> </li> <li> <p>WithAnalyzeWildcard () (Optional, Functional option) If true, the query attempts to analyze wildcard terms in the query string. Defaults to false.</p> </li> <li> <p>WithAnalyzer (string) (Optional, Functional option) Analyzer used to convert text in the query string into tokens.</p> </li> <li> <p>WithAutoGenerateSynonymsPhrase (bool) (Optional, Functional option) If true, match phrase queries are automatically created for multi-term synonyms. Defaults to true.</p> </li> <li> <p>WithFlags (string) (Optional, Functional option) List of enabled operators for the simple query string syntax. Defaults to ALL (all operators). See Limit operators for valid values.</p> </li> <li> <p>WithFuzzyMaxExpansions (int) (Optional, Functional option) Maximum number of terms for fuzzy matching expansion.</p> </li> <li> <p>WithFuzzyPrefixLength (int) (Optional, Functional option) Number of beginning characters left unchanged for fuzzy matching.</p> </li> <li> <p>WithFuzzyTranspositions (bool) (Optional, Functional option) If true, edits for fuzzy matching include transpositions of adjacent characters.</p> </li> <li> <p>WithLenient (bool) (Optional, Functional option) If true, format-based errors are ignored.</p> </li> <li> <p>WithMinimumShouldMatch (string) (Optional, Functional option) Minimum number of clauses that must match for a document to be returned.</p> </li> <li> <p>WithQuoteFieldSuffix (string) (Optional, Functional option) Suffix appended to quoted text in the query string.</p> </li> </ul>"},{"location":"simple_query_string/#additional-information","title":"Additional Information","text":"<p>For more details on the simple query string query and its parameters, refer to the official Elasticsearch documentation on simple query string queries.</p>"},{"location":"sort_search/","title":"Sort search results","text":"<p>Allows you to add one or more sorts on specific fields. Each sort can be reversed as well. The sort is defined on a per field level, with special field name for _score to sort by score, and _doc to sort by index order.</p>"},{"location":"term_query/","title":"Term Query","text":"<p>A term query returns documents that contain an exact term in a provided field. The term must exactly match the field value, including whitespace and capitalization.</p>"},{"location":"term_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    tq \"github.com/sdqri/effdsl/queries/termquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        tq.TermQuery(\n            \"user.id\",\n            \"kimchy\",\n            tq.WithBoost(1.5),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"term_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Value (string) (Required, positional) The term you wish to find in the provided field. This is a required parameter. The term must exactly match the field value, including whitespace and capitalization.</p> </li> <li> <p>WithBoost (float64) (Optional, Functional option) Floating point number used to decrease or increase the relevance scores of the query. Defaults to 1.0.</p> </li> <li> <p>WithCaseInsensitive (bool) (Optional, Functional option) Allows ASCII case-insensitive matching of the value with the indexed field values when set to true. Defaults to false.</p> </li> </ul>"},{"location":"term_query/#additional-information","title":"Additional Information","text":"<p>For more details on the term query and its parameters, refer to the official Elasticsearch documentation on term queries.</p>"},{"location":"term_suggester/","title":"Term Suggester","text":"<p>The term suggester suggests corrections for individual terms based on edit distance. Each term in the provided text is analyzed, and possible corrections are returned.</p>"},{"location":"term_suggester/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    ts \"github.com/sdqri/effdsl/suggesters/termsuggester\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithSuggest(\n        ts.TermSuggester(\n            \"my-suggestion\",\n            \"tring out Elasticsearch\",\n            \"message\",\n            ts.WithAnalyzer(\"test\"),\n            ts.WithSize(1),\n            ts.WithSort(ts.ByScore),\n            ts.WithMode(ts.Always),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"term_suggester/#parameters","title":"Parameters","text":"<ul> <li>SuggestName (string) (Required, positional) Name used to identify the suggestion in the response.</li> <li>Text (string) (Required, positional) Text to generate suggestions for.</li> <li>Field (string) (Required, positional) Field to fetch candidate suggestions from.</li> <li>WithAnalyzer(string) (Optional, Functional option) Analyzer used to analyze the suggest text.</li> <li>WithSize(uint64) (Optional, Functional option) Maximum number of suggestions to return.</li> <li>WithSort(TermSuggestSort) (Optional, Functional option) Defines how suggestions are sorted. Possible values: <code>ByScore</code>, <code>ByFrequency</code>.</li> <li>WithMode(TermSuggesterMode) (Optional, Functional option) Controls which suggestions are included. Possible values: <code>Missing</code>, <code>Popular</code>, <code>Always</code>.</li> </ul>"},{"location":"term_suggester/#additional-information","title":"Additional Information","text":"<p>For more details on the term suggester and its parameters, refer to the official Elasticsearch documentation on term suggesters.</p>"},{"location":"terms_query/","title":"Terms Query","text":"<p>A terms query returns documents that contain one or more exact terms in a provided field.</p>"},{"location":"terms_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    tsq \"github.com/sdqri/effdsl/queries/termsquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        tsq.TermsQuery(\n            \"user.id\",\n            []string{\"kimchy\", \"elkbee\"},\n            tsq.WithBoost(1.0),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"terms_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Values ([]string) (Required, positional) The array of terms you wish to find in the provided field. This is a required parameter.</p> </li> <li> <p>WithBoost (float64) (Optional, Functional option) Floating point number used to decrease or increase the relevance scores of a query. Defaults to 1.0.</p> </li> </ul>"},{"location":"terms_query/#additional-information","title":"Additional Information","text":"<p>For more details on the terms query and its parameters, refer to the official Elasticsearch documentation on terms queries.</p>"},{"location":"terms_set_query/","title":"Terms Set Query","text":"<p>A term set query returns documents that contain at least one of the specified terms in a provided field. To return a document, at least one of the terms must exactly match the field value, including whitespace and capitalization.</p>"},{"location":"terms_set_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    tsq \"github.com/sdqri/effdsl/queries/termssetquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        tsq.TermsSetQuery(\n            \"programming_languages\",\n            []string{\"c++\", \"java\", \"php\"},\n            tsq.WithMinimumShouldMatchField(\"required_matches\"),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"terms_set_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Terms ([]string) (Required, positional) An array of terms you wish to find in the provided field. To return a document, at least one of the terms must exactly match the field value, including whitespace and capitalization. This is a required parameter.</p> </li> <li> <p>WithMinimumShouldMatchField (string) (Optional, Functional option) The field that holds the minimum number of terms that should match. Only used when <code>minimum_should_match_script</code> is not set.</p> </li> <li> <p>WithMinimumShouldMatchScript (string) (Optional, Functional option) Script that returns the minimum number of terms that should match.</p> </li> </ul>"},{"location":"terms_set_query/#additional-information","title":"Additional Information","text":"<p>For more details on the term set query and its parameters, refer to the official Elasticsearch documentation on term set queries.</p>"},{"location":"wildcard_query/","title":"Wildcard Query","text":"<p>A wildcard query returns documents that contain terms matching a wildcard pattern. </p>"},{"location":"wildcard_query/#example","title":"Example","text":"<pre><code>import (\n    es \"github.com/elastic/go-elasticsearch/v8\"\n    \"github.com/sdqri/effdsl/v2\"\n    wq \"github.com/sdqri/effdsl/queries/wildcardquery\"\n)\n\nquery, err := effdsl.Define(\n    effdsl.WithQuery(\n        wq.WildcardQuery(\n            \"user.id\",\n            \"ki*y\",\n            wq.WithBoost(1.0),\n            wq.WithRewrite(wcq.ConstantScoreBlended),\n        ),\n    ),\n)\n\nres, err := es.Search(\n    es.Search.WithBody(strings.NewReader(query)),\n)\n</code></pre>"},{"location":"wildcard_query/#parameters","title":"Parameters","text":"<ul> <li> <p>Field (string) (Required, positional) The field you wish to search. This is a required parameter.</p> </li> <li> <p>Value (string) (Required, positional) The wildcard pattern for terms you wish to find in the provided field. This is a required parameter.</p> </li> <li> <p>WithBoost (float64) (Optional, Functional option) Floating point number used to decrease or increase the relevance scores of a query. Defaults to 1.0.</p> </li> <li> <p>WithCaseInsensitive (bool) (Optional, Functional option) If true, the wildcard pattern is treated as case-insensitive.</p> </li> <li> <p>WithRewrite (Rewrite) (Optional, Functional option) Method used to rewrite the query. For valid values and more information, see the rewrite parameter.</p> </li> </ul>"},{"location":"wildcard_query/#additional-information","title":"Additional Information","text":"<p>For more details on the wildcard query and its parameters, refer to the official Elasticsearch documentation on wildcard queries.</p>"}]}